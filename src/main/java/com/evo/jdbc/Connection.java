package com.evo.jdbc;

import java.lang.reflect.InvocationTargetException;
import java.sql.*;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

/**
 * Class that implements basic functionality of a JDBC Connection.
 * This class has everything prepared to use a JDBCEventListener in the several moments of the working flow of a JDBC
 * To give some functionalities, this class does not have to be changed.
 * Instead, for almost new functionalities it is only needed to change the callbacks of JdbcEventListener passed to this class
 *
 * @param <PS> extends PreparedStatement
 * @param <S> extends Statement
 */
public class Connection<PS extends PreparedStatement, S extends Statement> implements java.sql.Connection {
	
	/**
	 * Connection with the real Database
	 */
	private java.sql.Connection connection;
	
	/**
	 * Object that has the callbacks already implemented for the several moments of the working flow of this Driver
	 */
	private EventListener eventListener;
	
	/**
	 * Class that should be used as PreparedStatement
	 */
	private Class<PS> preparedStatementClass;
	
	/**
	 * Class that should be used as Statement
	 */
	private Class<S> statementClass;
	
	public Connection(java.sql.Connection connection, EventListener eventListener, Class<PS> preparedStatementClass,
	                  Class<S> statementClass) {
		this.connection = connection;
		this.eventListener = eventListener;
		this.preparedStatementClass = preparedStatementClass;
		this.statementClass = statementClass;
	}
	
	public java.sql.Connection getDirectConnection() {
		return this.connection;
	}
	
	@Override
	public S createStatement() throws SQLException {
		return this.createStatementInternal(this.connection.createStatement());
	}
	
	@Override
	public S createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
		return this.createStatementInternal(this.connection.createStatement(resultSetType,
				resultSetConcurrency));
	}
	
	@Override
	public S createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return this.createStatementInternal(this.connection.createStatement(resultSetType,
				resultSetConcurrency, resultSetHoldability));
	}
	
	@Override
	public PS prepareStatement(String sql) throws SQLException {
		return this.prepareStatementInternal(
				this.connection.prepareStatement(sql),
				sql
		);
	}
	
	@Override
	public PS prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		return this.prepareStatementInternal(
				this.connection.prepareStatement(sql, resultSetType, resultSetConcurrency),
				sql
		);
	}
	
	@Override
	public PS prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return this.prepareStatementInternal(
				this.connection.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability),
				sql
		);
	}
	
	@Override
	public PS prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
		return this.prepareStatementInternal(
				this.connection.prepareStatement(sql, autoGeneratedKeys),
				sql
		);
	}
	
	@Override
	public PS prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		return this.prepareStatementInternal(
				this.connection.prepareStatement(sql, columnIndexes),
				sql
		);
	}
	
	@Override
	public PS prepareStatement(String sql, String[] columnNames) throws SQLException {
		return this.prepareStatementInternal(
				this.connection.prepareStatement(sql, columnNames),
				sql
		);
	}
	
	@Override
	public CallableStatement prepareCall(String sql) throws SQLException {
		return this.connection.prepareCall(sql);
	}
	
	@Override
	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		return this.connection.prepareCall(sql, resultSetType, resultSetConcurrency);
	}
	
	@Override
	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return this.connection.prepareCall(sql, resultSetType, resultSetConcurrency,
				resultSetHoldability);
	}
	
	@Override
	public String nativeSQL(String sql) throws SQLException {
		return this.connection.nativeSQL(sql);
	}
	
	@Override
	public void setAutoCommit(boolean autoCommit) throws SQLException {
		this.connection.setAutoCommit(autoCommit);
	}
	
	@Override
	public boolean getAutoCommit() throws SQLException {
		return this.connection.getAutoCommit();
	}
	
	@Override
	public void commit() throws SQLException {
		this.connection.commit();
	}
	
	@Override
	public void rollback() throws SQLException {
		this.connection.rollback();
	}
	
	@Override
	public void close() throws SQLException {
		this.connection.close();
	}
	
	@Override
	public boolean isClosed() throws SQLException {
		return this.connection.isClosed();
	}
	
	@Override
	public DatabaseMetaData getMetaData() throws SQLException {
		return this.connection.getMetaData();
	}
	
	@Override
	public void setReadOnly(boolean readOnly) throws SQLException {
		this.connection.setReadOnly(readOnly);
	}
	
	@Override
	public boolean isReadOnly() throws SQLException {
		return this.connection.isReadOnly();
	}
	
	@Override
	public void setCatalog(String catalog) throws SQLException {
		this.connection.setCatalog(catalog);
	}
	
	@Override
	public String getCatalog() throws SQLException {
		return this.connection.getCatalog();
	}
	
	@Override
	public void setTransactionIsolation(int level) throws SQLException {
		this.connection.setTransactionIsolation(level);
	}
	
	@Override
	public int getTransactionIsolation() throws SQLException {
		return this.connection.getTransactionIsolation();
	}
	
	@Override
	public SQLWarning getWarnings() throws SQLException {
		return this.connection.getWarnings();
	}
	
	@Override
	public void clearWarnings() throws SQLException {
		this.connection.clearWarnings();
	}
	
	@Override
	public Map<String, Class<?>> getTypeMap() throws SQLException {
		return this.connection.getTypeMap();
	}
	
	@Override
	public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
		this.connection.setTypeMap(map);
	}
	
	@Override
	public void setHoldability(int holdability) throws SQLException {
		this.connection.setHoldability(holdability);
	}
	
	@Override
	public int getHoldability() throws SQLException {
		return this.connection.getHoldability();
	}
	
	@Override
	public Savepoint setSavepoint() throws SQLException {
		return this.connection.setSavepoint();
	}
	
	@Override
	public Savepoint setSavepoint(String name) throws SQLException {
		return this.connection.setSavepoint(name);
	}
	
	@Override
	public void rollback(Savepoint savepoint) throws SQLException {
		this.connection.rollback(savepoint);
	}
	
	@Override
	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
		this.connection.releaseSavepoint(savepoint);
	}
	
	@Override
	public Clob createClob() throws SQLException {
		return this.connection.createClob();
	}
	
	@Override
	public Blob createBlob() throws SQLException {
		return this.connection.createBlob();
	}
	
	@Override
	public NClob createNClob() throws SQLException {
		return this.connection.createNClob();
	}
	
	@Override
	public SQLXML createSQLXML() throws SQLException {
		return this.connection.createSQLXML();
	}
	
	@Override
	public boolean isValid(int timeout) throws SQLException {
		return this.connection.isValid(timeout);
	}
	
	@Override
	public void setClientInfo(String name, String value) throws SQLClientInfoException {
		this.connection.setClientInfo(name, value);
	}
	
	@Override
	public void setClientInfo(Properties properties) throws SQLClientInfoException {
		this.connection.setClientInfo(properties);
	}
	
	@Override
	public String getClientInfo(String name) throws SQLException {
		return this.connection.getClientInfo(name);
	}
	
	@Override
	public Properties getClientInfo() throws SQLException {
		return this.connection.getClientInfo();
	}
	
	@Override
	public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
		return this.connection.createArrayOf(typeName, elements);
	}
	
	@Override
	public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
		return this.connection.createStruct(typeName, attributes);
	}
	
	@Override
	public void setSchema(String schema) throws SQLException {
		this.connection.setSchema(schema);
	}
	
	@Override
	public String getSchema() throws SQLException {
		return this.connection.getSchema();
	}
	
	@Override
	public void abort(Executor executor) throws SQLException {
		this.connection.abort(executor);
	}
	
	@Override
	public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
		this.connection.setNetworkTimeout(executor, milliseconds);
	}
	
	@Override
	public int getNetworkTimeout() throws SQLException {
		return this.connection.getNetworkTimeout();
	}
	
	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return this.connection.unwrap(iface);
	}
	
	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return this.connection.isWrapperFor(iface);
	}
	
	private S createStatementInternal(java.sql.Statement statement) throws SQLException {
		try {
			return this.statementClass
					.getConstructor(
							java.sql.Statement.class,
							java.sql.Connection.class,
							EventListener.class
					).newInstance(
							statement,
							this.connection,
							this.eventListener
					);
		} catch (NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
			throw new SQLException(
					"Statement class must have a constructor with the following arguments:\n" +
							"- " + java.sql.Statement.class.getCanonicalName() + " statement\n" +
							"- " + java.sql.Connection.class.getCanonicalName() + " connection\n" +
							"- " + EventListener.class.getCanonicalName() + " eventListener\n"
			);
		}
	}
	
	private PS prepareStatementInternal(java.sql.PreparedStatement preparedStatement, String sql) throws SQLException {
		try {
			return this.preparedStatementClass
					.getConstructor(
							java.sql.PreparedStatement.class,
							java.sql.Connection.class,
							EventListener.class,
							String.class
					)
					.newInstance(
							preparedStatement,
							this.connection,
							this.eventListener,
							sql
					);
		} catch (NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
			throw new SQLException(
					"PreparedStatement class must have a constructor with the following arguments:\n" +
							"- " + java.sql.PreparedStatement.class.getCanonicalName() + " preparedStatement\n" +
							"- " + java.sql.Connection.class.getCanonicalName() + " connection\n" +
							"- " + EventListener.class.getCanonicalName() + " eventListener\n" +
							"- " + String.class.getCanonicalName() + " sql\n"
			);
		}
	}
}
