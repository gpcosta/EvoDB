package com.evo.jdbc;

import com.evo.jdbc.info.PreparedStatementInfo;
import com.evo.jdbc.info.Value;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.*;
import java.util.*;

/**
 * Class that implements methods of java.sql.PreparedStatement
 */
public class PreparedStatement extends Statement implements java.sql.PreparedStatement {
	
	/**
	 * Command written by the user (SQL or other command)
	 */
	private String command;
	
	/**
	 * Values provided to the current PreparedStatement
	 */
	private Map<Integer, Value> currentParameters;
	
	/**
	 * All different values that are provided to the PreparedStatement that will be executed in batch
	 */
	private final List<Map<Integer, Value>> batchParameters;
	
	/**
	 * @param originalStatement
	 * @param connection
	 * @param eventListener
	 * @param command
	 */
	public PreparedStatement(java.sql.PreparedStatement originalStatement, Connection connection,
	                         EventListener eventListener, String command) {
		super(originalStatement, connection, eventListener);
		this.command = command;
		this.currentParameters = new HashMap<>();
		this.batchParameters = new ArrayList<>();
	}
	
	/**
	 * @note this.originalStatement is inherited from Statement, but it is more useful for this class
	 * if its type is downcasted from java.sql.Statement to java.sql.PreparedStatement
	 * So, this method is the only way to do that. In this class, use this.getOriginalStatement()
	 * instead of this.originalStatement
	 */
	protected java.sql.PreparedStatement getOriginalStatement() {
		return (java.sql.PreparedStatement) this.originalStatement;
	}
	
	@Override
	public boolean execute() throws SQLException {
		return this.executeInternal(
				new PreparedStatementInfo(this.connection, this.command, this.currentParameters),
				() -> this.getOriginalStatement().execute()
		);
	}
	
	@Override
	public boolean execute(String sql) throws SQLException {
		this.command = sql;
		return this.executeInternal(
				new PreparedStatementInfo(this.connection, this.command, this.currentParameters),
				() -> this.getOriginalStatement().execute(this.command)
		);
	}
	
	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		this.command = sql;
		return this.executeInternal(
				new PreparedStatementInfo(this.connection, this.command, this.currentParameters),
				() -> this.getOriginalStatement().execute(this.command, autoGeneratedKeys)
		);
	}
	
	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		this.command = sql;
		return this.executeInternal(
				new PreparedStatementInfo(this.connection, this.command, this.currentParameters),
				() -> this.getOriginalStatement().execute(this.command, columnIndexes)
		);
	}
	
	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		this.command = sql;
		return this.executeInternal(
				new PreparedStatementInfo(this.connection, this.command, this.currentParameters),
				() -> this.getOriginalStatement().execute(this.command, columnNames)
		);
	}
	
	@Override
	public ResultSet executeQuery() throws SQLException {
		return this.executeQueryInternal(
				new PreparedStatementInfo(this.connection, this.command, this.currentParameters),
				() -> this.getOriginalStatement().executeQuery()
		);
	}
	
	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		this.command = sql;
		return this.executeQueryInternal(
				new PreparedStatementInfo(this.connection, this.command, this.currentParameters),
				() -> this.getOriginalStatement().executeQuery(this.command)
		);
	}
	
	@Override
	public int executeUpdate() throws SQLException {
		return this.executeUpdateInternal(
				new PreparedStatementInfo(this.connection, this.command, this.currentParameters),
				() -> this.getOriginalStatement().executeUpdate()
		);
	}
	
	@Override
	public int executeUpdate(String sql) throws SQLException {
		this.command = sql;
		return this.executeUpdateInternal(
				new PreparedStatementInfo(this.connection, this.command, this.currentParameters),
				() -> this.getOriginalStatement().executeUpdate(this.command)
		);
	}
	
	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		this.command = sql;
		return this.executeUpdateInternal(
				new PreparedStatementInfo(this.connection, this.command, this.currentParameters),
				() -> this.getOriginalStatement().executeUpdate(this.command, autoGeneratedKeys)
		);
	}
	
	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		return this.executeUpdateInternal(
				new PreparedStatementInfo(this.connection, this.command, this.currentParameters),
				() -> this.getOriginalStatement().executeUpdate(this.command, columnIndexes)
		);
	}
	
	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		return this.executeUpdateInternal(
				new PreparedStatementInfo(this.connection, this.command, this.currentParameters),
				() -> this.getOriginalStatement().executeUpdate(this.command, columnNames)
		);
	}
	
	@Override
	public void addBatch() throws SQLException {
		this.getOriginalStatement().addBatch();
		this.batchParameters.add(this.currentParameters);
	}
	
	@Override
	public void addBatch(String sql) throws SQLException {
		throw new UnsupportedOperationException("There is no 'addBatch' method with 'sql' as parameter in a PreparedStatement.");
	}
	
	@Override
	public void clearBatch() throws SQLException {
		this.getOriginalStatement().clearBatch();
		this.batchParameters.clear();
	}
	
	@Override
	public int[] executeBatch() throws SQLException {
		List<PreparedStatementInfo> preparedStatementsInfo = new ArrayList<>();
		for (Map<Integer, Value> parameters : this.batchParameters)
			preparedStatementsInfo.add(new PreparedStatementInfo(this.connection, this.command, parameters));
		return this.executeBatchInternal(preparedStatementsInfo, () -> this.getOriginalStatement().executeBatch());
	}
	
	@Override
	public void clearParameters() throws SQLException {
		this.getOriginalStatement().clearParameters();
		this.currentParameters = new HashMap<>();
	}
	
	@Override
	public void setArray(int parameterIndex, Array x) throws SQLException {
		this.getOriginalStatement().setArray(parameterIndex, x);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
		this.getOriginalStatement().setAsciiStream(parameterIndex, x);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
		this.getOriginalStatement().setAsciiStream(parameterIndex, x, length);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
		this.getOriginalStatement().setAsciiStream(parameterIndex, x, length);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
		this.getOriginalStatement().setBigDecimal(parameterIndex, x);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
		this.getOriginalStatement().setBinaryStream(parameterIndex, x);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
		this.getOriginalStatement().setBinaryStream(parameterIndex, x, length);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
		this.getOriginalStatement().setBinaryStream(parameterIndex, x, length);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setBlob(int parameterIndex, Blob x) throws SQLException {
		this.getOriginalStatement().setBlob(parameterIndex, x);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
		this.getOriginalStatement().setBlob(parameterIndex, inputStream);
		this.currentParameters.put(parameterIndex, new Value(inputStream));
	}
	
	@Override
	public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
		this.getOriginalStatement().setBlob(parameterIndex, inputStream, length);
		this.currentParameters.put(parameterIndex, new Value(inputStream));
	}
	
	@Override
	public void setBoolean(int parameterIndex, boolean x) throws SQLException {
		this.getOriginalStatement().setBoolean(parameterIndex, x);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setByte(int parameterIndex, byte x) throws SQLException {
		this.getOriginalStatement().setByte(parameterIndex, x);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setBytes(int parameterIndex, byte[] x) throws SQLException {
		this.getOriginalStatement().setBytes(parameterIndex, x);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
		this.getOriginalStatement().setCharacterStream(parameterIndex, reader);
		this.currentParameters.put(parameterIndex, new Value(reader));
	}
	
	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
		this.getOriginalStatement().setCharacterStream(parameterIndex, reader, length);
		this.currentParameters.put(parameterIndex, new Value(reader));
	}
	
	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
		this.getOriginalStatement().setCharacterStream(parameterIndex, reader, length);
		this.currentParameters.put(parameterIndex, new Value(reader));
	}
	
	@Override
	public void setClob(int parameterIndex, Clob x) throws SQLException {
		this.getOriginalStatement().setClob(parameterIndex, x);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setClob(int parameterIndex, Reader reader) throws SQLException {
		this.getOriginalStatement().setClob(parameterIndex, reader);
		this.currentParameters.put(parameterIndex, new Value(reader));
	}
	
	@Override
	public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
		this.getOriginalStatement().setClob(parameterIndex, reader, length);
		this.currentParameters.put(parameterIndex, new Value(reader));
	}
	
	@Override
	public void setDate(int parameterIndex, Date x) throws SQLException {
		this.getOriginalStatement().setDate(parameterIndex, x);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
		this.getOriginalStatement().setDate(parameterIndex, x, cal);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setDouble(int parameterIndex, double x) throws SQLException {
		this.getOriginalStatement().setDouble(parameterIndex, x);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setFloat(int parameterIndex, float x) throws SQLException {
		this.getOriginalStatement().setFloat(parameterIndex, x);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setInt(int parameterIndex, int x) throws SQLException {
		this.getOriginalStatement().setInt(parameterIndex, x);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setLong(int parameterIndex, long x) throws SQLException {
		this.getOriginalStatement().setLong(parameterIndex, x);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
		this.getOriginalStatement().setNCharacterStream(parameterIndex, value);
		this.currentParameters.put(parameterIndex, new Value(value));
	}
	
	@Override
	public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
		this.getOriginalStatement().setNCharacterStream(parameterIndex, value, length);
		this.currentParameters.put(parameterIndex, new Value(value));
	}
	
	@Override
	public void setNClob(int parameterIndex, Reader reader) throws SQLException {
		this.getOriginalStatement().setNClob(parameterIndex, reader);
		this.currentParameters.put(parameterIndex, new Value(reader));
	}
	
	@Override
	public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
		this.getOriginalStatement().setNClob(parameterIndex, reader, length);
		this.currentParameters.put(parameterIndex, new Value(reader));
	}
	
	@Override
	public void setNClob(int parameterIndex, NClob value) throws SQLException {
		this.getOriginalStatement().setNClob(parameterIndex, value);
		this.currentParameters.put(parameterIndex, new Value(value));
	}
	
	@Override
	public void setNString(int parameterIndex, String value) throws SQLException {
		this.getOriginalStatement().setNString(parameterIndex, value);
		this.currentParameters.put(parameterIndex, new Value(value));
	}
	
	@Override
	public void setNull(int parameterIndex, int sqlType) throws SQLException {
		this.getOriginalStatement().setNull(parameterIndex, sqlType);
		this.currentParameters.put(parameterIndex, new Value());
	}
	
	@Override
	public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {
		this.getOriginalStatement().setNull(parameterIndex, sqlType, typeName);
		this.currentParameters.put(parameterIndex, new Value());
	}
	
	@Override
	public void setObject(int parameterIndex, Object x) throws SQLException {
		this.getOriginalStatement().setObject(parameterIndex, x);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
		this.getOriginalStatement().setObject(parameterIndex, x, targetSqlType);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {
		this.getOriginalStatement().setObject(parameterIndex, x, targetSqlType, scaleOrLength);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setRef(int parameterIndex, Ref x) throws SQLException {
		this.getOriginalStatement().setRef(parameterIndex, x);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setRowId(int parameterIndex, RowId x) throws SQLException {
		this.getOriginalStatement().setRowId(parameterIndex, x);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setShort(int parameterIndex, short x) throws SQLException {
		this.getOriginalStatement().setShort(parameterIndex, x);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
		this.getOriginalStatement().setSQLXML(parameterIndex, xmlObject);
		this.currentParameters.put(parameterIndex, new Value(xmlObject));
	}
	
	@Override
	public void setString(int parameterIndex, String x) throws SQLException {
		this.getOriginalStatement().setString(parameterIndex, x);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setTime(int parameterIndex, Time x) throws SQLException {
		this.getOriginalStatement().setTime(parameterIndex, x);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
		this.getOriginalStatement().setTime(parameterIndex, x, cal);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
		this.getOriginalStatement().setTimestamp(parameterIndex, x);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
		this.getOriginalStatement().setTimestamp(parameterIndex, x, cal);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
		this.getOriginalStatement().setUnicodeStream(parameterIndex, x, length);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public void setURL(int parameterIndex, URL x) throws SQLException {
		this.getOriginalStatement().setURL(parameterIndex, x);
		this.currentParameters.put(parameterIndex, new Value(x));
	}
	
	@Override
	public ResultSetMetaData getMetaData() throws SQLException {
		return this.getOriginalStatement().getMetaData();
	}
	
	@Override
	public ParameterMetaData getParameterMetaData() throws SQLException {
		return this.getOriginalStatement().getParameterMetaData();
	}
}
