package com.evo.jdbc;

import com.evo.jdbc.info.StatementInfo;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;

public class Statement implements java.sql.Statement {
	
	/**
	 * The Statement that contacts with the real Database
	 */
	protected java.sql.Statement originalStatement;
	
	/**
	 * Connection with the real Database
	 */
	protected Connection connection;
	
	/**
	 * Event Listener that implements callbacks for the several moments in the workflow of the Driver
	 */
	protected EventListener eventListener;
	
	/**
	 * All commands that will be executed in batch
	 */
	private final List<String> batchCommands;
	
	/**
	 * Result obtained in the last executed query
	 */
	Result currentResult;
	
	public Statement(java.sql.Statement originalStatement, Connection connection, EventListener eventListener) {
		this.originalStatement = originalStatement;
		this.connection = connection;
		this.eventListener = eventListener;
		this.batchCommands = new ArrayList<>();
		this.currentResult = null;
	}
	
	@Override
	public boolean execute(String sql) throws SQLException {
		return this.executeInternal(
				new StatementInfo(this.connection, sql),
				() -> this.originalStatement.execute(sql)
		);
	}
	
	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		return this.executeInternal(
				new StatementInfo(this.connection, sql),
				() -> this.originalStatement.execute(sql, autoGeneratedKeys)
		);
	}
	
	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return this.executeInternal(
				new StatementInfo(this.connection, sql),
				() -> this.originalStatement.execute(sql, columnIndexes)
		);
	}
	
	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		return this.executeInternal(
				new StatementInfo(this.connection, sql),
				() -> this.originalStatement.execute(sql, columnNames)
		);
	}
	
	/**
	 * @param statementInfo information about the statement to be executed
	 * @param executeCallback callback that will be called when execute should run
	 * @return true if the result is a result set
	 * @throws SQLException
	 */
	protected boolean executeInternal(StatementInfo statementInfo, Callable<Boolean> executeCallback) throws SQLException {
		Result listenerResult = this.eventListener.onBeforeExecute(statementInfo);
		if (listenerResult != null) {
			this.currentResult = listenerResult;
			return listenerResult.isResultSet();
		}
		try {
			boolean result = executeCallback.call();
			listenerResult = this.eventListener.onAfterExecuteSuccess(statementInfo, result);
			if (listenerResult != null) {
				this.currentResult = listenerResult;
				return listenerResult.isResultSet();
			}
			return result;
		} catch (SQLException e) {
			this.eventListener.onAfterExecuteError(statementInfo, e);
			throw e;
		} catch (Exception e) {
			SQLException ex = new SQLException("executeCallback has some problem.", e);
			this.eventListener.onAfterExecuteError(statementInfo, ex);
			throw ex;
		}
	}
	
	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		return this.executeQueryInternal(
				new StatementInfo(this.connection, sql),
				() -> this.originalStatement.executeQuery(sql)
		);
	}
	
	/**
	 * @param statementInfo information about the statement to be queried
	 * @param executeCallback callback that will be called when executeQuery should run
	 * @return ResultSet obtained by the query
	 * @throws SQLException
	 */
	protected ResultSet executeQueryInternal(StatementInfo statementInfo, Callable<ResultSet> executeCallback) throws SQLException {
		Result listenerResult = this.eventListener.onBeforeExecuteQuery(statementInfo);
		if (listenerResult != null) {
			this.currentResult = listenerResult;
			return listenerResult.getResultSet();
		}
		try {
			ResultSet result = executeCallback.call();
			listenerResult = this.eventListener.onAfterExecuteQuerySuccess(statementInfo, result);
			if (listenerResult != null) {
				this.currentResult = listenerResult;
				return listenerResult.getResultSet();
			}
			return result;
		} catch (SQLException e) {
			this.eventListener.onAfterExecuteQueryError(statementInfo, e);
			throw e;
		} catch (Exception e) {
			SQLException ex = new SQLException("executeCallback has some problem.", e);
			this.eventListener.onAfterExecuteError(statementInfo, ex);
			throw ex;
		}
	}
	
	@Override
	public int executeUpdate(String sql) throws SQLException {
		return this.executeUpdateInternal(
				new StatementInfo(this.connection, sql),
				() -> this.originalStatement.executeUpdate(sql)
		);
	}
	
	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		return this.executeUpdateInternal(
				new StatementInfo(this.connection, sql),
				() -> this.originalStatement.executeUpdate(sql, autoGeneratedKeys)
		);
	}
	
	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		return this.executeUpdateInternal(
				new StatementInfo(this.connection, sql),
				() -> this.originalStatement.executeUpdate(sql, columnIndexes)
		);
	}
	
	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		return this.executeUpdateInternal(
				new StatementInfo(this.connection, sql),
				() -> this.originalStatement.executeUpdate(sql, columnNames)
		);
	}
	
	/**
	 * @param statementInfo information about the statement to be executed
	 * @param executeCallback callback that will be called when executeQuery should run
	 * @return number of rows that were manipulated (can come from INSERT, UPDATE or DELETE)
	 * @throws SQLException
	 */
	protected int executeUpdateInternal(StatementInfo statementInfo, Callable<Integer> executeCallback) throws SQLException {
		Result listenerResult = this.eventListener.onBeforeExecuteUpdate(statementInfo);
		if (listenerResult != null) {
			this.currentResult = listenerResult;
			return listenerResult.getUpdatedCount();
		}
		try {
			int result = executeCallback.call();
			listenerResult = this.eventListener.onAfterExecuteUpdateSuccess(statementInfo, result);
			if (listenerResult != null) {
				this.currentResult = listenerResult;
				return listenerResult.getUpdatedCount();
			}
			return result;
		} catch (SQLException e) {
			this.eventListener.onAfterExecuteUpdateError(statementInfo, e);
			throw e;
		} catch (Exception e) {
			SQLException ex = new SQLException("executeCallback has some problem.", e);
			this.eventListener.onAfterExecuteError(statementInfo, ex);
			throw ex;
		}
	}
	
	@Override
	public void addBatch(String sql) throws SQLException {
		this.originalStatement.addBatch(sql);
		this.batchCommands.add(sql);
	}
	
	@Override
	public void clearBatch() throws SQLException {
		this.originalStatement.clearBatch();
		this.batchCommands.clear();
	}
	
	@Override
	public int[] executeBatch() throws SQLException {
		List<StatementInfo> statementsInfo = new ArrayList<>();
		for (String command : this.batchCommands)
			statementsInfo.add(new StatementInfo(this.connection, command));
		return this.executeBatchInternal(statementsInfo, () -> this.originalStatement.executeBatch());
	}
	
	/**
	 * @param statementsInfo information about the statements to be executed
	 * @param executeCallback callback that will be called when executeBatch should run
	 * @return number of rows that were manipulated (can come from INSERT, UPDATE or DELETE)
	 * @throws SQLException
	 */
	protected int[] executeBatchInternal(List<? extends StatementInfo> statementsInfo, Callable<int[]> executeCallback) throws SQLException {
		List<Result> listenerResult = this.eventListener.onBeforeExecuteBatch(statementsInfo);
		if (listenerResult != null) {
			this.currentResult = listenerResult.get(0);
			int[] result = new int[listenerResult.size()];
			for (int i = 0, len = listenerResult.size(); i < len; i++)
				result[i] = listenerResult.get(i).isUpdatedCount() ? listenerResult.get(i).getUpdatedCount() : 0;
			return result;
		}
		try {
			int[] result = executeCallback.call();
			listenerResult = this.eventListener.onAfterExecuteBatchSuccess(statementsInfo, result);
			if (listenerResult != null) {
				this.currentResult = listenerResult.get(0);
				result = new int[listenerResult.size()];
				for (int i = 0, len = listenerResult.size(); i < len; i++)
					result[i] = listenerResult.get(i).isUpdatedCount() ? listenerResult.get(i).getUpdatedCount() : 0;
				return result;
			}
			return result;
		} catch (SQLException e) {
			this.eventListener.onAfterExecuteBatchError(statementsInfo, e);
			throw e;
		} catch (Exception e) {
			SQLException ex = new SQLException("executeCallback has some problem.", e);
			this.eventListener.onAfterExecuteBatchError(statementsInfo, ex);
			throw ex;
		}
	}
	
	@Override
	public void close() throws SQLException {
		this.originalStatement.close();
	}
	
	@Override
	public int getMaxFieldSize() throws SQLException {
		return this.originalStatement.getMaxFieldSize();
	}
	
	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		this.originalStatement.setMaxFieldSize(max);
	}
	
	@Override
	public int getMaxRows() throws SQLException {
		return this.originalStatement.getMaxRows();
	}
	
	@Override
	public void setMaxRows(int max) throws SQLException {
		this.originalStatement.setMaxRows(max);
	}
	
	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		this.originalStatement.setEscapeProcessing(enable);
	}
	
	@Override
	public int getQueryTimeout() throws SQLException {
		return this.originalStatement.getQueryTimeout();
	}
	
	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		this.originalStatement.setQueryTimeout(seconds);
	}
	
	@Override
	public void cancel() throws SQLException {
		this.originalStatement.cancel();
	}
	
	@Override
	public SQLWarning getWarnings() throws SQLException {
		return this.originalStatement.getWarnings();
	}
	
	@Override
	public void clearWarnings() throws SQLException {
		this.originalStatement.clearWarnings();
	}
	
	@Override
	public void setCursorName(String name) throws SQLException {
		this.originalStatement.setCursorName(name);
	}
	
	@Override
	public ResultSet getResultSet() throws SQLException {
		if (this.currentResult != null && this.currentResult.isResultSet())
			return this.currentResult.getResultSet();
		return this.originalStatement.getResultSet();
	}
	
	@Override
	public int getUpdateCount() throws SQLException {
		if (this.currentResult != null && this.currentResult.isUpdatedCount())
			return this.currentResult.getUpdatedCount();
		return this.originalStatement.getUpdateCount();
	}
	
	@Override
	public boolean getMoreResults() throws SQLException {
		return this.originalStatement.getMoreResults();
	}
	
	@Override
	public void setFetchDirection(int direction) throws SQLException {
		this.originalStatement.setFetchDirection(direction);
	}
	
	@Override
	public int getFetchDirection() throws SQLException {
		return this.originalStatement.getFetchDirection();
	}
	
	@Override
	public void setFetchSize(int rows) throws SQLException {
		this.originalStatement.setFetchSize(rows);
	}
	
	@Override
	public int getFetchSize() throws SQLException {
		return this.originalStatement.getFetchSize();
	}
	
	@Override
	public int getResultSetConcurrency() throws SQLException {
		return this.originalStatement.getResultSetConcurrency();
	}
	
	@Override
	public int getResultSetType() throws SQLException {
		return this.originalStatement.getResultSetType();
	}
	
	@Override
	public Connection getConnection() throws SQLException {
		return this.connection;
	}
	
	@Override
	public boolean getMoreResults(int current) throws SQLException {
		return this.originalStatement.getMoreResults();
	}
	
	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return this.originalStatement.getGeneratedKeys();
	}
	
	@Override
	public int getResultSetHoldability() throws SQLException {
		return this.originalStatement.getResultSetHoldability();
	}
	
	@Override
	public boolean isClosed() throws SQLException {
		return this.originalStatement.isClosed();
	}
	
	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		this.originalStatement.setPoolable(poolable);
	}
	
	@Override
	public boolean isPoolable() throws SQLException {
		return this.originalStatement.isPoolable();
	}
	
	@Override
	public void closeOnCompletion() throws SQLException {
		this.originalStatement.closeOnCompletion();
	}
	
	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		return this.originalStatement.isCloseOnCompletion();
	}
	
	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return this.originalStatement.unwrap(iface);
	}
	
	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return this.originalStatement.isWrapperFor(iface);
	}
}
